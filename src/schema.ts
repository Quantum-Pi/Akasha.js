/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/artifacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Artifacts */
        get: operations["getApiArtifacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Builds */
        get: operations["getApiBuilds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filters/artifacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Filters Artifacts */
        get: operations["getApiFiltersArtifacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filters/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Filters Categories */
        get: operations["getApiFiltersCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/filters/characters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Filters Characters */
        get: operations["getApiFiltersCharacters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/getCalculationsForUser/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        /** Get Api Get Calculations For User By ID */
        get: operations["getApiGetCalculationsForUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/getCollectionSize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api Get Collection Size */
        get: operations["getApiGetCollectionSize"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/getRelevantProfiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        /** Get Api Get Relevant Profiles By ID */
        get: operations["getApiGetRelevantProfilesById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        /** Get Api User By ID */
        get: operations["getApiUserById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/leaderboards/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Api V 2 Leaderboards Categories */
        get: operations["getApiV2LeaderboardsCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getApiArtifacts: {
        parameters: {
            query?: {
                /** @description sort */
                sort?: string;
                /** @description order */
                order?: string;
                /** @description size */
                size?: string;
                /** @description page */
                page?: string;
                /** @description filter */
                filter?: string;
                /** @description uids */
                uids?: string;
                /** @description p */
                p?: string;
                /** @description fromId */
                fromId?: string;
                /** @description uid */
                uid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            _id: string;
                            critValue: number;
                            /**
                             * EquipType
                             * @enum {string}
                             */
                            equipType: "EQUIP_NECKLACE" | "EQUIP_BRACER" | "EQUIP_SHOES" | "EQUIP_RING" | "EQUIP_DRESS";
                            /** Format: uri */
                            icon: string;
                            index: number;
                            level: number;
                            mainStatKey: string;
                            mainStatValue: number;
                            name: string;
                            /** Format: uri */
                            nameCardLink: string;
                            /** Owner */
                            owner: {
                                adventureRank: number;
                                /** Discord */
                                discord: {
                                    id: string;
                                };
                                /** EnkaOwner */
                                enkaOwner: Record<string, never>;
                                /** Format: integer */
                                inGameUID: string;
                                nameCard: string;
                                nickname: string;
                                /** Discord */
                                patreon: {
                                    id: string;
                                };
                                /** ProfilePicture */
                                profilePicture: {
                                    /** Assets */
                                    assets: {
                                        icon: string;
                                        oldIcon: string;
                                    };
                                    characterId: number;
                                    id: number;
                                    name: unknown;
                                };
                                /**
                                 * Region
                                 * @enum {string}
                                 */
                                region: "NA" | "ASIA" | "EU";
                            };
                            /** Format: uri */
                            profilePictureLink: string;
                            setName: string;
                            stars: number;
                            substats: {
                                [key: string]: number;
                            };
                            substatsIdList: number[];
                            /** Format: integer */
                            uid: string;
                            universal_md5: string;
                        }[];
                        totalRowsHash: string;
                        ttl: number;
                    };
                };
            };
        };
    };
    getApiBuilds: {
        parameters: {
            query?: {
                /** @description sort */
                sort?: string;
                /** @description order */
                order?: string;
                /** @description size */
                size?: string;
                /** @description page */
                page?: string;
                /** @description filter */
                filter?: string;
                /** @description uids */
                uids?: string;
                /** @description p */
                p?: string;
                /** @description fromId */
                fromId?: string;
                /** @description uid */
                uid?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            _id: string;
                            /** ArtifactObjects */
                            artifactObjects: {
                                /** Equip */
                                EQUIP_DRESS: {
                                    mainStatKey: string;
                                };
                                /** Equip */
                                EQUIP_RING: {
                                    mainStatKey: string;
                                };
                                /** EquipShoes */
                                EQUIP_SHOES: {
                                    /**
                                     * MainStatKey
                                     * @enum {string}
                                     */
                                    mainStatKey: "ATK%" | "HP%" | "Energy Recharge" | "Elemental Mastery" | "DEF%";
                                };
                            };
                            artifactSets: {
                                [key: string]: {
                                    count?: number;
                                    /** Format: uri */
                                    icon?: string;
                                };
                            };
                            characterId: number;
                            /** CharacterMetadata */
                            characterMetadata: {
                                element: string;
                            };
                            constellation: number;
                            /** CostumeID */
                            costumeId: number | string;
                            critValue: number;
                            /** FetterInfo */
                            fetterInfo: {
                                expLevel: number;
                            };
                            /** Format: uri */
                            icon: string;
                            index: number;
                            lastBuildUpdate: number;
                            md5: string;
                            name: string;
                            /** Format: uri */
                            nameCardLink: string;
                            /** Owner */
                            owner: {
                                adventureRank: number;
                                nameCard: string;
                                nickname: string;
                                /** Patreon */
                                patreon: {
                                    active: boolean;
                                    color: string;
                                };
                                /** ProfilePicture */
                                profilePicture: {
                                    /** Assets */
                                    assets: {
                                        constellations: string[];
                                        costumes: {
                                            art: string;
                                            icon: string;
                                            sideIconName: string;
                                        }[];
                                        gachaIcon: string;
                                        icon: string;
                                        oldIcon: string;
                                        sideIcon: string;
                                        /** Talents */
                                        talents: {
                                            elementalBurst: string;
                                            elementalSkill: string;
                                            normalAttack: string;
                                        };
                                    };
                                    characterId: number;
                                    /** CostumeID */
                                    id: number | string;
                                    name: unknown;
                                };
                                /**
                                 * Region
                                 * @enum {string}
                                 */
                                region: "NA" | "ASIA" | "B" | "EU" | "CN";
                            };
                            /** Format: uri */
                            profilePictureLink: string;
                            /** PropMap */
                            propMap: {
                                /** Ascension */
                                ascension: {
                                    /** Format: integer */
                                    val: string;
                                };
                                /** Ascension */
                                level: {
                                    /** Format: integer */
                                    val: string;
                                };
                            };
                            proudSkillExtraLevelMap: {
                                [key: string]: number;
                            };
                            skillDepotId: number;
                            sortableType: string;
                            stats: {
                                [key: string]: {
                                    value?: number;
                                };
                            };
                            /** TalentsLevelMap */
                            talentsLevelMap: {
                                /** ElementalBurst */
                                elementalBurst: {
                                    boosted: boolean;
                                    /** Format: uri */
                                    icon: string;
                                    id: number;
                                    level: number;
                                    rawLevel: number;
                                };
                                /** ElementalBurst */
                                elementalSkill: {
                                    boosted: boolean;
                                    /** Format: uri */
                                    icon: string;
                                    id: number;
                                    level: number;
                                    rawLevel: number;
                                };
                                /** ElementalBurst */
                                normalAttacks: {
                                    boosted: boolean;
                                    /** Format: uri */
                                    icon: string;
                                    id: number;
                                    level: number;
                                    rawLevel: number;
                                };
                            };
                            type: string;
                            /** Format: integer */
                            uid: string;
                            /** Weapon */
                            weapon: {
                                /** Flat */
                                flat: {
                                    /** Icon */
                                    icon: {
                                        value: string;
                                    };
                                };
                                /** Format: uri */
                                icon: string;
                                name: string;
                                /** WeaponInfo */
                                weaponInfo: {
                                    level: number;
                                    promoteLevel: number;
                                    /** RefinementLevel */
                                    refinementLevel: {
                                        value: number;
                                    };
                                };
                            };
                        }[];
                        totalRowsHash: string;
                        ttl: number;
                    };
                };
            };
        };
    };
    getApiFiltersArtifacts: {
        parameters: {
            query?: {
                /** @description type */
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            fieldKey: string;
                            fieldName: string;
                            options: {
                                /** Format: uri */
                                icon: string;
                                name: string;
                                value: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    getApiFiltersCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            fieldKey: string;
                            fieldName: string;
                            options: {
                                /** Format: uri */
                                icon: string;
                                name: string;
                                value: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    getApiFiltersCharacters: {
        parameters: {
            query?: {
                /** @description type */
                type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            fieldKey: string;
                            fieldName: string;
                            options: {
                                /** Format: uri */
                                icon: string;
                                name: string;
                                value: string;
                            }[];
                        }[];
                    };
                };
            };
        };
    };
    getApiGetCalculationsForUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            _id: string;
                            artifactSets: {
                                [key: string]: {
                                    count?: number;
                                    icon?: string;
                                };
                            };
                            /** Calculations */
                            calculations: {
                                /** Fit */
                                fit: {
                                    /** Format: integer */
                                    calculationId: string;
                                    details: string;
                                    md5: string;
                                    name: string;
                                    outOf: number;
                                    priority: number;
                                    ranking: number;
                                    result: number;
                                    short: string;
                                    stats: unknown;
                                    /**
                                     * Type
                                     * @enum {string}
                                     */
                                    type: "current";
                                    /** Variant */
                                    variant: {
                                        displayName: string;
                                        name: string;
                                    };
                                    /** FitWeapon */
                                    weapon: {
                                        /** Format: uri */
                                        icon: string;
                                        name: string;
                                        rarity: number;
                                        refinement: number;
                                        substat: string;
                                        type: string;
                                    };
                                };
                            };
                            characterId: number;
                            constellation: number;
                            /** Format: uri */
                            icon: string;
                            md5: string;
                            name: string;
                            stats: unknown;
                            /**
                             * Type
                             * @enum {string}
                             */
                            type: "current";
                            /** Format: integer */
                            uid: string;
                            /** DatumWeapon */
                            weapon: {
                                /** Flat */
                                flat: {
                                    /** Icon */
                                    icon: {
                                        toLink: unknown;
                                        value: string;
                                    };
                                    /**
                                     * ItemType
                                     * @enum {string}
                                     */
                                    itemType: "ITEM_WEAPON";
                                    name: unknown;
                                    nameTextMapHash: string;
                                    stars: number;
                                    weaponStats: {
                                        stat: string;
                                        statValue: number;
                                    }[];
                                };
                                /** Format: uri */
                                icon: string;
                                name: string;
                                weaponId: number;
                                /** WeaponInfo */
                                weaponInfo: {
                                    level: number;
                                    promoteLevel: number;
                                    /** RefinementLevel */
                                    refinementLevel: {
                                        value: number;
                                    };
                                };
                            };
                        }[];
                        ttl: number;
                    };
                };
            };
        };
    };
    getApiGetCollectionSize: {
        parameters: {
            query?: {
                /** @description variant */
                variant?: string;
                /** @description hash */
                hash?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        totalRows: number;
                    };
                };
            };
        };
    };
    getApiGetRelevantProfilesById: {
        parameters: {
            query?: never;
            header?: {
                /** @description Authorization */
                Authorization?: string;
            };
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            _id: string;
                            achievements: {
                                count: number;
                                description: string;
                                id: number;
                                name: string;
                                score: number;
                                type: string;
                            }[];
                            buildsCount: number;
                            /** Format: uri */
                            displayAvatarLink: string;
                            enkaAvatar: unknown;
                            lastProfileUpdate: number;
                            /** Format: uri */
                            namecardURL: string;
                            ownedCharacters: number[];
                            /** Patreon */
                            patreon: {
                                active: boolean;
                            };
                            /** PlayerInfo */
                            playerInfo: {
                                /** EnkaOwner */
                                enkaOwner: Record<string, never>;
                                finishAchievementNum: number;
                                /** Format: integer */
                                inGameUID: string;
                                level: number;
                                maxFriendshipCount: number;
                                /** NameCardID */
                                nameCardId: {
                                    /** NameCardIDAssets */
                                    assets: {
                                        icon: string;
                                        picPath: string[];
                                    };
                                    id: number;
                                    name: unknown;
                                };
                                nickname: string;
                                /** ProfilePicture */
                                profilePicture: {
                                    /** ProfilePictureAssets */
                                    assets: {
                                        icon: string;
                                        oldIcon: string;
                                    };
                                    characterId: number;
                                    id: number;
                                    name: unknown;
                                };
                                region: string;
                                /** Format: integer */
                                signature: string;
                                /** Theater */
                                theater: {
                                    act: number;
                                    mode: string;
                                    modeIndex: number;
                                    stars: number;
                                };
                                towerFloorIndex: number;
                                towerLevelIndex: number;
                                towerStarIndex: number;
                                worldLevel: number;
                            };
                            /** Format: integer */
                            uid: string;
                            /** Format: uri */
                            uidAvatar: string;
                        }[];
                        ttl: number;
                    };
                };
            };
        };
    };
    getApiUserById: {
        parameters: {
            query?: never;
            header?: {
                /** @description Authorization */
                Authorization?: string;
            };
            path: {
                /** @example 605452914 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        bindTTL: number;
                        /** Data */
                        data: {
                            /** Account */
                            account: {
                                _id: string;
                                achievements: {
                                    count: number;
                                    description: string;
                                    id: number;
                                    name: string;
                                    score: number;
                                    type: string;
                                }[];
                                lastProfileUpdate: number;
                                /** Format: uri */
                                nameCardLink: string;
                                ownedCharacters: number[];
                                /** Patreon */
                                patreon: Record<string, never>;
                                /** PlayerInfo */
                                playerInfo: {
                                    /** Patreon */
                                    enkaOwner: Record<string, never>;
                                    finishAchievementNum: number;
                                    /** Format: integer */
                                    inGameUID: string;
                                    level: number;
                                    maxFriendshipCount: number;
                                    /** NameCardID */
                                    nameCardId: {
                                        /** NameCardIDAssets */
                                        assets: {
                                            icon: string;
                                            picPath: string[];
                                        };
                                        id: number;
                                        name: unknown;
                                    };
                                    nickname: string;
                                    /** ProfilePicture */
                                    profilePicture: {
                                        /** ProfilePictureAssets */
                                        assets: {
                                            icon: string;
                                            oldIcon: string;
                                        };
                                        characterId: number;
                                        id: number;
                                        name: unknown;
                                    };
                                    region: string;
                                    /** Format: integer */
                                    signature: string;
                                    /** Theater */
                                    theater: {
                                        act: number;
                                        mode: string;
                                        modeIndex: number;
                                        stars: number;
                                    };
                                    towerFloorIndex: number;
                                    towerLevelIndex: number;
                                    towerStarIndex: number;
                                    worldLevel: number;
                                };
                                /** Format: uri */
                                profilePictureLink: string;
                                /** Format: integer */
                                uid: string;
                            };
                        };
                        secret: unknown;
                        ttl: number;
                    };
                };
            };
        };
    };
    getApiV2LeaderboardsCategories: {
        parameters: {
            query?: {
                /** @description sort */
                sort?: string;
                /** @description order */
                order?: string;
                /** @description size */
                size?: string;
                /** @description page */
                page?: string;
                /** @description filter */
                filter?: string;
                /** @description uids */
                uids?: string;
                /** @description p */
                p?: string;
                /** @description fromId */
                fromId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            _id: string;
                            addDate: number;
                            /**
                             * C6
                             * @enum {string}
                             */
                            c6: "" | "c6";
                            /** Format: uri */
                            characterIcon: string;
                            characterId: number;
                            characterName: string;
                            count: number;
                            details: string;
                            /**
                             * Element
                             * @enum {string}
                             */
                            element: "Electro" | "Hydro" | "Anemo" | "Dendro" | "Pyro" | "Geo" | "Cryo";
                            hidden: boolean;
                            index: number;
                            label: string;
                            name: string;
                            new: number;
                            rarity: number;
                            short: string;
                            weapons: {
                                /** Format: integer */
                                calculationId: string;
                                defaultVariant: "160er" | "180er" | "c6" | "c2-160er" | "130er" | "c2-130er" | "c2" | "vv" | "120er" | null;
                                details: string;
                                filters: {
                                    $and?: {
                                        /** ArtifactSetsCount */
                                        "artifactSets.Deepwood Memories.count"?: {
                                            $gte?: number;
                                        };
                                        /** ArtifactSetsNoblesseObligeCount */
                                        "artifactSets.Noblesse Oblige.count"?: {
                                            $in?: (number | null)[];
                                        };
                                        /** ArtifactSetsCount */
                                        "artifactSets.Thundering Fury.count"?: {
                                            $gte?: number;
                                        };
                                        /** ArtifactSetsCount */
                                        "artifactSets.Viridescent Venerer.count"?: {
                                            $gte?: number;
                                        };
                                        constellation?: {
                                            [key: string]: number;
                                        };
                                        /** StatsEnergyRechargeValue */
                                        "stats.energyRecharge.value"?: {
                                            $gte?: number;
                                        };
                                    }[];
                                    /**
                                     * DisplayGroup
                                     * @enum {string}
                                     */
                                    displayGroup?: "base" | "non-4p Deepwood" | "C6" | "C2" | "non-4p Shimenawa's" | "4p Shimenawa's" | "4p ToTM" | "4p Petra" | "4p Wanderer's" | "4p Blizzard" | "4p Thundering Fury" | "4p Deepwood" | "ToTM" | "4p Viridescent" | "non-4p Noblesse";
                                    displayName?: string;
                                    name?: string;
                                    /** Query */
                                    query?: {
                                        /**
                                         * Field
                                         * @enum {string}
                                         */
                                        field?: "stats.energyRecharge.value" | "artifactSets.Deepwood Memories.count" | "constellation" | "artifactSets.Shimenawa's Reminiscence.count" | "artifactSets.Tenacity of the Millelith.count" | "artifactSets.Archaic Petra.count" | "artifactSets.Wanderer's Troupe.count" | "artifactSets.Blizzard Strayer.count" | "artifactSets.Thundering Fury.count" | "artifactSets.Viridescent Venerer.count" | "artifactSets.Noblesse Oblige.count";
                                        /**
                                         * Operator
                                         * @enum {string}
                                         */
                                        operator?: "$gte" | "$in" | "$eq";
                                        /** Value */
                                        value?: (number | null)[] | number;
                                    };
                                }[] | null;
                                hidden: boolean;
                                /** Format: uri */
                                icon: string;
                                name: string;
                                rarity: number;
                                refinement: number;
                                short: string;
                                /**
                                 * Substat
                                 * @enum {string}
                                 */
                                substat: "CRIT DMG" | "CRIT Rate" | "ATK" | "Elemental Mastery" | "HP" | "Energy Recharge" | "Physical DMG Bonus" | "DEF";
                                teammates: {
                                    /** Character */
                                    character: {
                                        artifactSet: "4x Deepwood Memories" | "4x Viridescent Venerer" | "4x Noblesse Oblige" | "4x Scroll of the Hero of Cinder City" | "4x Instructor" | "4x Tenacity of the Millelith" | "4x Archaic Petra" | "4x Blizzard Strayer" | null;
                                        /** Format: uri */
                                        artifactSetIcon: string;
                                        constellation: number | null;
                                        /**
                                         * Element
                                         * @enum {string}
                                         */
                                        element: "Electro" | "Hydro" | "Anemo" | "Dendro" | "Pyro" | "Geo" | "Cryo";
                                        /** Format: uri */
                                        icon: string;
                                        name: string;
                                        rarity: number;
                                    };
                                    /** TeammateWeapon */
                                    weapon: {
                                        /** Format: uri */
                                        icon: string;
                                        name: string;
                                        rarity: number;
                                        refinement: number;
                                    };
                                }[];
                                /**
                                 * Type
                                 * @enum {string}
                                 */
                                type: "Sword" | "Catalyst" | "Polearm" | "Bow" | "Claymore";
                            }[];
                            weaponsCount: number;
                        }[];
                        totalRowsHash: string;
                        ttl: number;
                    };
                };
            };
        };
    };
}
